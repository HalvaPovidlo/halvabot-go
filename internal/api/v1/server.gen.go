// Package v1 provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.11.0 DO NOT EDIT.
package v1

import (
	"fmt"
	"net/http"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/gin-gonic/gin"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Login
	// (POST /auth/token)
	PostAuthToken(c *gin.Context)
	// Find and enqueue song
	// (POST /music/enqueue/{service}/{kind})
	PostMusicEnqueueServiceIdentifier(c *gin.Context, service string, kind string)
	// Set loop mode
	// (POST /music/loop)
	PostMusicLoop(c *gin.Context)
	// Set radio mode
	// (POST /music/radio)
	PostMusicRadio(c *gin.Context)
	// Skip song
	// (POST /music/skip)
	PostMusicSkip(c *gin.Context)
	// Player status
	// (GET /music/status)
	GetMusicStatus(c *gin.Context)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
}

type MiddlewareFunc func(c *gin.Context)

// PostAuthToken operation middleware
func (siw *ServerInterfaceWrapper) PostAuthToken(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.PostAuthToken(c)
}

// PostMusicEnqueueServiceIdentifier operation middleware
func (siw *ServerInterfaceWrapper) PostMusicEnqueueServiceIdentifier(c *gin.Context) {

	var err error

	// ------------- Path parameter "service" -------------
	var service string

	err = runtime.BindStyledParameter("simple", false, "service", c.Param("service"), &service)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter service: %s", err)})
		return
	}

	// ------------- Path parameter "kind" -------------
	var kind string

	err = runtime.BindStyledParameter("simple", false, "kind", c.Param("kind"), &kind)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter kind: %s", err)})
		return
	}

	c.Set(JWTScopes, []string{""})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.PostMusicEnqueueServiceIdentifier(c, service, kind)
}

// PostMusicLoop operation middleware
func (siw *ServerInterfaceWrapper) PostMusicLoop(c *gin.Context) {

	c.Set(JWTScopes, []string{""})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.PostMusicLoop(c)
}

// PostMusicRadio operation middleware
func (siw *ServerInterfaceWrapper) PostMusicRadio(c *gin.Context) {

	c.Set(JWTScopes, []string{""})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.PostMusicRadio(c)
}

// PostMusicSkip operation middleware
func (siw *ServerInterfaceWrapper) PostMusicSkip(c *gin.Context) {

	c.Set(JWTScopes, []string{""})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.PostMusicSkip(c)
}

// GetMusicStatus operation middleware
func (siw *ServerInterfaceWrapper) GetMusicStatus(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.GetMusicStatus(c)
}

// GinServerOptions provides options for the Gin server.
type GinServerOptions struct {
	BaseURL     string
	Middlewares []MiddlewareFunc
}

// RegisterHandlers creates http.Handler with routing matching OpenAPI spec.
func RegisterHandlers(router *gin.Engine, si ServerInterface) *gin.Engine {
	return RegisterHandlersWithOptions(router, si, GinServerOptions{})
}

// RegisterHandlersWithOptions creates http.Handler with additional options
func RegisterHandlersWithOptions(router *gin.Engine, si ServerInterface, options GinServerOptions) *gin.Engine {
	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
	}

	router.POST(options.BaseURL+"/auth/token", wrapper.PostAuthToken)

	router.POST(options.BaseURL+"/music/enqueue/:service/:kind", wrapper.PostMusicEnqueueServiceIdentifier)

	router.POST(options.BaseURL+"/music/loop", wrapper.PostMusicLoop)

	router.POST(options.BaseURL+"/music/radio", wrapper.PostMusicRadio)

	router.POST(options.BaseURL+"/music/skip", wrapper.PostMusicSkip)

	router.GET(options.BaseURL+"/music/status", wrapper.GetMusicStatus)

	return router
}
