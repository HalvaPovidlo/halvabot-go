openapi: 3.0.0
info:
  title: halvabot
  version: '1.0'
  description: This API controls the music player and movie library
  contact:
    name: Andrei Khodko
    url: 'https://github.com/khodand'
    email: andrei.khodko@gmail.com
  license:
    name: Apache 2.0
    url: 'http://www.apache.org/licenses/LICENSE-2.0.html'
servers:
  - url: 'http://51.250.81.4:9091/api/v1'
    description: botapp
  - url: 'http://51.250.81.4:9090/api/v1'
    description: botmock
  - description: local-app
    url: 'http://localhost:9091/api/v1'
  - url: 'http://localhost:9090/api/v1'
    description: local-mock
tags:
  - name: auth
    description: Authorization and authentication
  - name: films
    description: Acess to the films library
  - name: music
    description: Music player control
  - name: user
    description: User profile and data
paths:
  '/music/enqueue/{service}/{kind}':
    parameters:
      - schema:
          type: string
          default: youtube
          enum:
            - youtube
            - vk
        name: service
        in: path
        required: true
        description: 'Which service to search for a song '
      - schema:
          type: string
          default: query
          enum:
            - query
            - id
        name: kind
        in: path
        required: true
        description: Which kind of query use to find a song
    post:
      summary: Find and enqueue song
      operationId: post-music-enqueue-service-identifier
      responses:
        '200':
          description: Song has been queued up
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Song'
              examples:
                example-1:
                  value:
                    title: string
                    url: 'http://example.com'
                    service: youtube
                    artist_name: string
                    artist_url: 'http://example.com'
                    artwork_url: 'http://example.com'
                    thumbnail_url: 'http://example.com'
                    playbacks: 0
                    last_play: '2022-07-29T17:51:09.851964+03:00'
        '400':
          $ref: '#/components/responses/Error'
        '401':
          description: Unauthorized
        '409':
          description: Bot is not connected to the server
        '500':
          $ref: '#/components/responses/Error'
        '507':
          description: Internal Storage Error
          content:
            application/json:
              schema:
                type: object
                properties:
                  song:
                    $ref: '#/components/schemas/Song'
                  error:
                    type: string
      tags:
        - music
      description: Finds and enqueues a song for playback in the selected service and by the specified ID.
      security:
        - JWT: []
      parameters: []
      requestBody:
        content:
          application/json:
            schema:
              type: object
              x-examples:
                example-1:
                  input: ckfd
              properties:
                input:
                  type: string
                  x-oapi-codegen-extra-tags:
                    binding: required
              required:
                - input
            examples:
              example-1:
                value:
                  input: string
        description: Query of specified
  /music/skip:
    parameters: []
    post:
      summary: Skip song
      operationId: post-music-skip
      responses:
        '200':
          description: OK
        '401':
          description: Unauthorized
        '409':
          description: Bot is not connected to the server
        '500':
          $ref: '#/components/responses/Error'
      description: Skip the current song and play the next song from the queue
      security:
        - JWT: []
      tags:
        - music
  /music/status:
    get:
      summary: Player status
      tags:
        - music
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                x-examples:
                  example-1:
                    loop: true
                    now:
                      artist_name: string
                      artist_url: string
                      artwork_url: string
                      last_play:
                        time.Time: string
                      playbacks: 0
                      service: string
                      thumbnail_url: string
                      title: string
                      url: string
                    radio: true
                    song:
                      duration: 0
                      position: 0
                properties:
                  loop:
                    type: boolean
                  now:
                    $ref: '#/components/schemas/Song'
                  radio:
                    type: boolean
                  duration:
                    type: integer
                  position:
                    type: integer
                required:
                  - loop
                  - now
                  - radio
                  - duration
                  - position
      operationId: get-music-status
      description: 'Player status: radio mode, loop mode, current song and duration'
  /music/loop:
    post:
      summary: Set loop mode
      operationId: post-music-loop
      responses:
        '200':
          description: OK
        '400':
          $ref: '#/components/responses/Error'
        '401':
          description: Unauthorized
        '409':
          description: Bot is not connected
        '500':
          $ref: '#/components/responses/Error'
      description: Set the song loop mode
      security:
        - JWT: []
      tags:
        - music
      requestBody:
        $ref: '#/components/requestBodies/Enable-mode'
  /music/radio:
    post:
      summary: Set radio mode
      operationId: post-music-radio
      responses:
        '200':
          description: OK
        '400':
          $ref: '#/components/responses/Error'
        '401':
          description: Unauthorized
        '409':
          description: Bot is not connected
        '500':
          $ref: '#/components/responses/Error'
      tags:
        - music
      description: Set the player to radio mode
      requestBody:
        $ref: '#/components/requestBodies/Enable-mode'
      security:
        - JWT: []
  /auth/token:
    post:
      summary: Login
      operationId: post-auth-token
      responses:
        '200':
          $ref: '#/components/responses/Token'
        '401':
          $ref: '#/components/responses/Error'
      tags:
        - auth
      description: Get JWT for authorization
      requestBody:
        content:
          application/json:
            schema:
              type: object
              x-examples:
                example-1:
                  login: adfadsaf
                  password: asdfs
              properties:
                login:
                  type: string
                  x-oapi-codegen-extra-tags:
                    binding: required
                  description: Case-insensitive
                password:
                  type: string
                  x-oapi-codegen-extra-tags:
                    binding: required
                  description: Case-sensitive
              required:
                - login
                - password
        description: Login and password
  /films/new:
    post:
      summary: Add new film
      operationId: post-films-new
      responses:
        '200':
          $ref: '#/components/responses/Film'
      description: Add new film to the lib
      security:
        - JWT: []
      requestBody:
        $ref: '#/components/requestBodies/New-film'
      parameters:
        - schema:
            type: boolean
            default: true
          in: query
          name: kinopoisk
          description: Use kinopoisk api help
      tags:
        - films
  /films/kinopoisk:
    post:
      summary: Add kinopoisk film
      operationId: post-films-kinopoisk
      responses:
        '200':
          $ref: '#/components/responses/Film'
      description: Add new kinopoisk film
      tags:
        - films
      requestBody:
        $ref: '#/components/requestBodies/New-kinoposk'
      security:
        - JWT: []
  '/films/{id}':
    get:
      summary: Get film
      tags:
        - films
      responses:
        '200':
          $ref: '#/components/responses/Film'
      operationId: get-films
      description: Get full film data
    parameters:
      - $ref: '#/components/parameters/film-id'
    post:
      summary: Edit film
      operationId: post-films-id
      responses:
        '200':
          $ref: '#/components/responses/Film'
      description: Edit an existing film
      security:
        - JWT: []
      requestBody:
        $ref: '#/components/requestBodies/New-film'
  '/films/{id}/score':
    parameters:
      - $ref: '#/components/parameters/film-id'
    post:
      summary: Score film
      operationId: post-films-id-score
      responses:
        '200':
          $ref: '#/components/responses/Film'
      description: Add user score to the film
      security:
        - JWT: []
      requestBody:
        $ref: '#/components/requestBodies/Score'
      tags:
        - films
  '/films/{id}/comment':
    parameters:
      - $ref: '#/components/parameters/film-id'
    post:
      summary: Comment film
      operationId: post-films-id-comment
      responses:
        '200':
          description: OK
      description: Add user comment to the film
      requestBody:
        $ref: '#/components/requestBodies/Comment'
      tags:
        - films
      security:
        - JWT: []
  /films/all:
    get:
      summary: All films
      tags:
        - films
      responses:
        '200':
          $ref: '#/components/responses/Films'
      operationId: get-films-all
      description: Get all films
components:
  schemas:
    Song:
      type: object
      x-examples: {}
      description: The object that describes a song
      title: Song
      x-tags:
        - music
      properties:
        title:
          type: string
        url:
          type: string
          format: uri
        service:
          type: string
          enum:
            - youtube
            - unknown
        artist_name:
          type: string
        artist_url:
          type: string
          format: uri
        artwork_url:
          type: string
          format: uri
        thumbnail_url:
          type: string
          format: uri
        playbacks:
          type: integer
        last_play:
          type: string
          format: date-time
          example: '2022-07-29T17:51:09.851964+03:00'
      required:
        - title
        - url
        - service
        - artist_name
        - artist_url
        - artwork_url
        - thumbnail_url
        - playbacks
        - last_play
    Film:
      type: object
      x-examples:
        example-1:
          film_id: string
          title: string
          title_original: string
          cover: string
          poster: string
          director: string
          description: string
          duration: string
          score: 0
          user_score: 0
          average: 0
          kinopoisk: string
          rating_kinopoisk: 0
          rating_kinopoisk_vote_count: 0
          rating_imdb: 0
          rating_imdb_vote_count: 0
          year: 0
          film_length: 0
          serial: true
          short_film: true
          genres:
            - string
          scores: {}
      title: Film
      description: Film structure
      x-tags:
        - films
      properties:
        film_id:
          type: string
        title:
          type: string
        title_original:
          type: string
        cover:
          type: string
        poster:
          type: string
        director:
          type: string
        description:
          type: string
        duration:
          type: string
        score:
          type: integer
        user_score:
          type: integer
        average:
          type: number
        kinopoisk:
          type: string
        rating_kinopoisk:
          type: number
        rating_kinopoisk_vote_count:
          type: integer
        rating_imdb:
          type: number
        rating_imdb_vote_count:
          type: integer
        year:
          type: integer
        film_length:
          type: integer
        serial:
          type: boolean
        short_film:
          type: boolean
        genres:
          type: array
          items:
            type: string
        scores:
          type: object
        comments:
          type: object
      required:
        - film_id
        - title
        - score
        - average
        - kinopoisk
        - rating_kinopoisk
        - rating_kinopoisk_vote_count
        - rating_imdb
        - rating_imdb_vote_count
        - serial
        - short_film
  securitySchemes:
    JWT:
      type: http
      scheme: bearer
      description: ''
  responses:
    Error:
      description: Error response
      content:
        application/json:
          schema:
            type: object
            properties:
              msg:
                type: string
            required:
              - msg
    Token:
      description: JWT
      content:
        application/json:
          schema:
            type: object
            x-examples:
              example-1:
                token: string
            properties:
              token:
                type: string
            required:
              - token
          examples:
            example-1:
              value:
                token: string
    Films:
      description: Array of films
      content:
        application/json:
          schema:
            type: object
            properties:
              items:
                type: array
                items:
                  $ref: '#/components/schemas/Film'
            required:
              - items
    Film:
      description: Response film
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Film'
          examples:
            example-1:
              value:
                film_id: string
                title: string
                title_original: string
                cover: string
                poster: string
                director: string
                description: string
                duration: string
                score: 0
                user_score: 0
                average: 0
                kinopoisk: string
                rating_kinopoisk: 0
                rating_kinopoisk_vote_count: 0
                rating_imdb: 0
                rating_imdb_vote_count: 0
                year: 0
                film_length: 0
                serial: true
                short_film: true
                genres:
                  - string
                scores: {}
  requestBodies:
    Enable-mode:
      content:
        application/json:
          schema:
            type: object
            x-examples:
              example-1:
                enable: true
            properties:
              enable:
                type: boolean
                x-oapi-codegen-extra-tags:
                  binding: required
      description: Enable/disable mode
    New-film:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Film'
      description: New film
    Score:
      content:
        application/json:
          schema:
            type: object
            x-examples:
              example-1:
                score: 0
            properties:
              score:
                type: integer
            required:
              - score
      description: Film score
    Comment:
      content:
        application/json:
          schema:
            type: object
            x-examples:
              example-1:
                text: good film
            properties:
              text:
                type: string
            required:
              - text
          examples:
            example-1:
              value:
                text: string
      description: User comment
    New-kinoposk:
      content:
        application/json:
          schema:
            type: object
            x-examples:
              example-1:
                score: 0
                url: sdf
            properties:
              score:
                type: integer
              url:
                type: string
            required:
              - score
              - url
      description: New kinopoisk film with score
  parameters:
    film-id:
      name: id
      in: path
      required: true
      schema:
        type: string
      description: Film kinopoisk id
